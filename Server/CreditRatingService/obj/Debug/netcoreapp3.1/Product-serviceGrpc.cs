// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/product-service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ProductService {
  public static partial class ProductCrud
  {
    static readonly string __ServiceName = "Products.ProductCrud";

    static readonly grpc::Marshaller<global::ProductService.Empty> __Marshaller_Products_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ProductService.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ProductService.ProductList> __Marshaller_Products_ProductList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ProductService.ProductList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ProductService.ProductId> __Marshaller_Products_ProductId = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ProductService.ProductId.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::ProductService.Product> __Marshaller_Products_Product = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ProductService.Product.Parser.ParseFrom);

    static readonly grpc::Method<global::ProductService.Empty, global::ProductService.ProductList> __Method_GetAll = new grpc::Method<global::ProductService.Empty, global::ProductService.ProductList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAll",
        __Marshaller_Products_Empty,
        __Marshaller_Products_ProductList);

    static readonly grpc::Method<global::ProductService.ProductId, global::ProductService.Product> __Method_GetById = new grpc::Method<global::ProductService.ProductId, global::ProductService.Product>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetById",
        __Marshaller_Products_ProductId,
        __Marshaller_Products_Product);

    static readonly grpc::Method<global::ProductService.Product, global::ProductService.Product> __Method_Create = new grpc::Method<global::ProductService.Product, global::ProductService.Product>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_Products_Product,
        __Marshaller_Products_Product);

    static readonly grpc::Method<global::ProductService.Product, global::ProductService.Product> __Method_Update = new grpc::Method<global::ProductService.Product, global::ProductService.Product>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_Products_Product,
        __Marshaller_Products_Product);

    static readonly grpc::Method<global::ProductService.ProductId, global::ProductService.Empty> __Method_Delete = new grpc::Method<global::ProductService.ProductId, global::ProductService.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_Products_ProductId,
        __Marshaller_Products_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ProductService.ProductServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ProductCrud</summary>
    [grpc::BindServiceMethod(typeof(ProductCrud), "BindService")]
    public abstract partial class ProductCrudBase
    {
      public virtual global::System.Threading.Tasks.Task<global::ProductService.ProductList> GetAll(global::ProductService.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ProductService.Product> GetById(global::ProductService.ProductId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ProductService.Product> Create(global::ProductService.Product request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ProductService.Product> Update(global::ProductService.Product request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::ProductService.Empty> Delete(global::ProductService.ProductId request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ProductCrudBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAll, serviceImpl.GetAll)
          .AddMethod(__Method_GetById, serviceImpl.GetById)
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_Delete, serviceImpl.Delete).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ProductCrudBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAll, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ProductService.Empty, global::ProductService.ProductList>(serviceImpl.GetAll));
      serviceBinder.AddMethod(__Method_GetById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ProductService.ProductId, global::ProductService.Product>(serviceImpl.GetById));
      serviceBinder.AddMethod(__Method_Create, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ProductService.Product, global::ProductService.Product>(serviceImpl.Create));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ProductService.Product, global::ProductService.Product>(serviceImpl.Update));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ProductService.ProductId, global::ProductService.Empty>(serviceImpl.Delete));
    }

  }
}
#endregion
